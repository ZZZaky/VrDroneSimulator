//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Samples/HotKey.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HotKey: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HotKey()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HotKey"",
    ""maps"": [
        {
            ""name"": ""HotKeyActionMap"",
            ""id"": ""497e8af5-89f9-4c80-9aba-c69622c41864"",
            ""actions"": [
                {
                    ""name"": ""LoadOne"",
                    ""type"": ""Button"",
                    ""id"": ""dec538ef-4c33-492d-88c6-57775271aa97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadTwo"",
                    ""type"": ""Button"",
                    ""id"": ""622bd8e1-a307-475d-a9ee-3c65dc1ad22a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetPosition"",
                    ""type"": ""Button"",
                    ""id"": ""d05706fa-a370-4c11-a31e-bb3a3b87e10a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadOneGM"",
                    ""type"": ""Button"",
                    ""id"": ""7f401f69-0d02-4041-be77-7528af18be06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadTwoGM"",
                    ""type"": ""Button"",
                    ""id"": ""d704a918-1cc2-483f-8c5a-f4fd873ef6ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitFromGameMode"",
                    ""type"": ""Button"",
                    ""id"": ""254dc052-eb1e-4548-8bd5-82eef73b5af8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f06f29c1-4c60-4e5c-bff4-7a6c81ae1af5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""814a81c8-ef77-45d3-814e-3f8013e82970"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c6ceea9-8722-420b-a05f-6169b3fe5168"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d529e3d-bfe5-40fa-bc63-92dc2544c803"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadOneGM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a210129-a6a5-42ff-b755-2e965c55f43f"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadTwoGM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3c8c9e0-72c6-4d07-9ee6-b580620e1b4c"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitFromGameMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // HotKeyActionMap
        m_HotKeyActionMap = asset.FindActionMap("HotKeyActionMap", throwIfNotFound: true);
        m_HotKeyActionMap_LoadOne = m_HotKeyActionMap.FindAction("LoadOne", throwIfNotFound: true);
        m_HotKeyActionMap_LoadTwo = m_HotKeyActionMap.FindAction("LoadTwo", throwIfNotFound: true);
        m_HotKeyActionMap_ResetPosition = m_HotKeyActionMap.FindAction("ResetPosition", throwIfNotFound: true);
        m_HotKeyActionMap_LoadOneGM = m_HotKeyActionMap.FindAction("LoadOneGM", throwIfNotFound: true);
        m_HotKeyActionMap_LoadTwoGM = m_HotKeyActionMap.FindAction("LoadTwoGM", throwIfNotFound: true);
        m_HotKeyActionMap_ExitFromGameMode = m_HotKeyActionMap.FindAction("ExitFromGameMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HotKeyActionMap
    private readonly InputActionMap m_HotKeyActionMap;
    private List<IHotKeyActionMapActions> m_HotKeyActionMapActionsCallbackInterfaces = new List<IHotKeyActionMapActions>();
    private readonly InputAction m_HotKeyActionMap_LoadOne;
    private readonly InputAction m_HotKeyActionMap_LoadTwo;
    private readonly InputAction m_HotKeyActionMap_ResetPosition;
    private readonly InputAction m_HotKeyActionMap_LoadOneGM;
    private readonly InputAction m_HotKeyActionMap_LoadTwoGM;
    private readonly InputAction m_HotKeyActionMap_ExitFromGameMode;
    public struct HotKeyActionMapActions
    {
        private @HotKey m_Wrapper;
        public HotKeyActionMapActions(@HotKey wrapper) { m_Wrapper = wrapper; }
        public InputAction @LoadOne => m_Wrapper.m_HotKeyActionMap_LoadOne;
        public InputAction @LoadTwo => m_Wrapper.m_HotKeyActionMap_LoadTwo;
        public InputAction @ResetPosition => m_Wrapper.m_HotKeyActionMap_ResetPosition;
        public InputAction @LoadOneGM => m_Wrapper.m_HotKeyActionMap_LoadOneGM;
        public InputAction @LoadTwoGM => m_Wrapper.m_HotKeyActionMap_LoadTwoGM;
        public InputAction @ExitFromGameMode => m_Wrapper.m_HotKeyActionMap_ExitFromGameMode;
        public InputActionMap Get() { return m_Wrapper.m_HotKeyActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HotKeyActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IHotKeyActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_HotKeyActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HotKeyActionMapActionsCallbackInterfaces.Add(instance);
            @LoadOne.started += instance.OnLoadOne;
            @LoadOne.performed += instance.OnLoadOne;
            @LoadOne.canceled += instance.OnLoadOne;
            @LoadTwo.started += instance.OnLoadTwo;
            @LoadTwo.performed += instance.OnLoadTwo;
            @LoadTwo.canceled += instance.OnLoadTwo;
            @ResetPosition.started += instance.OnResetPosition;
            @ResetPosition.performed += instance.OnResetPosition;
            @ResetPosition.canceled += instance.OnResetPosition;
            @LoadOneGM.started += instance.OnLoadOneGM;
            @LoadOneGM.performed += instance.OnLoadOneGM;
            @LoadOneGM.canceled += instance.OnLoadOneGM;
            @LoadTwoGM.started += instance.OnLoadTwoGM;
            @LoadTwoGM.performed += instance.OnLoadTwoGM;
            @LoadTwoGM.canceled += instance.OnLoadTwoGM;
            @ExitFromGameMode.started += instance.OnExitFromGameMode;
            @ExitFromGameMode.performed += instance.OnExitFromGameMode;
            @ExitFromGameMode.canceled += instance.OnExitFromGameMode;
        }

        private void UnregisterCallbacks(IHotKeyActionMapActions instance)
        {
            @LoadOne.started -= instance.OnLoadOne;
            @LoadOne.performed -= instance.OnLoadOne;
            @LoadOne.canceled -= instance.OnLoadOne;
            @LoadTwo.started -= instance.OnLoadTwo;
            @LoadTwo.performed -= instance.OnLoadTwo;
            @LoadTwo.canceled -= instance.OnLoadTwo;
            @ResetPosition.started -= instance.OnResetPosition;
            @ResetPosition.performed -= instance.OnResetPosition;
            @ResetPosition.canceled -= instance.OnResetPosition;
            @LoadOneGM.started -= instance.OnLoadOneGM;
            @LoadOneGM.performed -= instance.OnLoadOneGM;
            @LoadOneGM.canceled -= instance.OnLoadOneGM;
            @LoadTwoGM.started -= instance.OnLoadTwoGM;
            @LoadTwoGM.performed -= instance.OnLoadTwoGM;
            @LoadTwoGM.canceled -= instance.OnLoadTwoGM;
            @ExitFromGameMode.started -= instance.OnExitFromGameMode;
            @ExitFromGameMode.performed -= instance.OnExitFromGameMode;
            @ExitFromGameMode.canceled -= instance.OnExitFromGameMode;
        }

        public void RemoveCallbacks(IHotKeyActionMapActions instance)
        {
            if (m_Wrapper.m_HotKeyActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHotKeyActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_HotKeyActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HotKeyActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HotKeyActionMapActions @HotKeyActionMap => new HotKeyActionMapActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IHotKeyActionMapActions
    {
        void OnLoadOne(InputAction.CallbackContext context);
        void OnLoadTwo(InputAction.CallbackContext context);
        void OnResetPosition(InputAction.CallbackContext context);
        void OnLoadOneGM(InputAction.CallbackContext context);
        void OnLoadTwoGM(InputAction.CallbackContext context);
        void OnExitFromGameMode(InputAction.CallbackContext context);
    }
}
